{% macro forecast_route(forecast) %}
{% if forecast.constant_values is defined %}
forecasts/cdf/{{ forecast.forecast_id }}
{% elif forecast.constant_value is defined %}
forecasts/cdf/single/{{ forecast.forecast_id }}
{% else %}
forecasts/single/{{ forecast.forecast_id }}
{% endif %}
{% endmacro %}

{% macro metric_table_fx_vert(report_metrics, category, metric_ordering) %}
<div class="report-table-wrapper">
<table class="table table-striped metric-table-fx-vert" style="width:100%;">
  <caption style="caption-side:top; text-align: left">
    Table of {{ category }} metrics
  </caption>
  <thead>
    <tr class="header">
      <th style="text-align: left;">Forecast</th>
      {% for metric in metric_ordering %}
        <th style="text-align: left;">{{ human_metrics[metric] }}</th>
      {% endfor %}
    </tr>
  </thead>
  <tbody>
    {% for fx_result in report_metrics %}
      <tr>
        <td>{{ fx_result.name }}</td>
        {% for metric in metric_ordering %}
          {% set ns = namespace(found=false) %}
          {% for mval in fx_result.values %}
            {% if mval.category == category  and mval.metric == metric %}
              {% set ns.found = true %}
              {% if -0.01 < mval.value < 0.01 %}
                <td>{{ '%.2e' | format(mval.value) }}</td>
              {% else %}
                <td>{{ '%0.3g' | format(mval.value) }}</td>
              {% endif %}
            {% endif %}
          {% endfor %}
          {% if not ns.found %}
            <td></td>
          {% endif %}
        {% endfor %}
      </tr>
    {% endfor %}
  </tbody>
</table>
</div>
{% endmacro %}


{% macro summary_stats_table_vert(summary_stats, category) %}
{% set span = (human_statistics.values() | length) %}
<div class="report-table-wrapper">
<table class="table table-striped table-bordered summary-stats-table-vert" style="width:100%;">
  <caption style="caption-side:top; text-align: left">
    Table of {{ human_categories[category] }} data summary statistics
  </caption>
  <thead>
    <tr class="header">
      <th scope="col" style="text-align: left;">Aligned Pair</th>
      <th scope="col" colspan="{{ span }}" style="text-align: center;">Observation</th>
      <th scope="col" colspan="{{ span }}" style="text-align: center;">Forecast</th>
      <th scope="col" colspan="{{ span }}" style="text-align: center;">Reference Forecast</th>
    </tr>
    <tr>
      <th></th>
      {% for i in range(3) %}
      {% for title in human_statistics.values() %}
      <th style="text-align: center;">{{ title }}</th>
      {% endfor %}
      {% endfor %}
    </tr>
  </thead>
  <tbody>
    {% for stat_result in summary_stats %}
      <tr>
        <td>{{ stat_result.name }}</td>
        {% for thing in ['observation', 'forecast', 'reference_forecast'] %}
          {% for metric in human_statistics.keys() %}
            {% set ns = namespace(found=false) %}
            {% for mval in stat_result.values %}
              {% if mval.category == category  and mval.metric == thing + '_' + metric %}
                {% set ns.found = true %}
                {% if -0.01 < mval.value < 0.01 %}
        <td>{{ '%.2e' | format(mval.value) }}</td>
                {% else %}
        <td>{{ '%0.3g' | format(mval.value) }}</td>
                {% endif %}
              {% endif %}
            {% endfor %}
            {% if not ns.found %}
        <td></td>
            {% endif %}
          {% endfor %}
        {% endfor %}
      </tr>
    {% endfor %}
  </tbody>
</table>
</div>
{% endmacro %}


{% macro metric_table_fx_horz(report_metrics, category, metric_ordering) %}
{% set metric_indexes = [] %}
{% for mresult in report_metrics %}
  {% for mval in mresult.values %}
    {% if mval.category == category and mval.index not in metric_indexes %}
      {% set metric_indexes = metric_indexes.append(mval.index) %}
    {% endif %}
  {% endfor %}
{% endfor %}
<table class="table table-striped" style="width:100%;">
  <caption style="caption-side:top; text-align:center">
    Table of {{ category }} metrics
  </caption>
  <thead>
    <tr class="header">
      <th></th>
      {% for mresult in report_metrics %}
        <th colspan="{{metric_ordering|length}}" style="text-align: center;">{{ mresult.name }}</th>
      {% endfor %}
    </tr>
    <tr class="header">
      <th style="text-align: left;">{{ category }} Value</th>
      {% for mresult in report_metrics %}
        {% for metric in metric_ordering %}
          <th style="test-align: center;">{{ human_metrics[metric] }}</th>
        {% endfor %}
      {% endfor %}
    </tr>
  </thead>
  <tbody>
    {% for mindex in metric_indexes %}
      <tr>
        <td>{{ mindex }}</td>
        {% for mresult in report_metrics %}
          {% for metric in metric_ordering %}
            {% set ns = namespace(found=false) %}
            {% for mval in mresult.values %}
              {% if mval.category == category  and mval.metric == metric and mval.index == mindex %}
                {% set ns.found = true %}
                {% if -1 < mval.value < 1 %}
                  <td>{{ '%.2e' | format(mval.value) }}</td>
                {% else %}
                  <td>{{ '%0.3g' | format(mval.value) }}</td>
                {% endif %}
              {% endif %}
            {% endfor %}
            {% if not ns.found %}
              <td></td>
            {% endif %}
          {% endfor %}
        {% endfor %}
      </tr>
    {% endfor %}
  </tbody>
</table>
{% endmacro %}


{% macro validation_metadata_table(quality_filters) %}
<div class="report-table-wrapper">
<table class="table table-striped validation-table" style="width:100%;" id="data-validation-filters-table">
  <caption style="caption-side:top; text-align: left">
    Table of data validation filters
  </caption>
  <thead>
    <tr class="header">
      <th style="text-align: left;">Quality flags</th>
      <th style="text-align: left;">Discard before resample</th>
      <th style="text-align: left;">Resample threshold (%)</th>
    </tr>
  </thead>
  <tbody>
    {% for qfilter in quality_filters %}
      <tr>
        <td style="text-align: left">{{ qfilter.quality_flags | join(', ') }}</td>
        <td style="text-align: left">{{ qfilter.discard_before_resample }}</td>
        <td style="text-align: left">{{ qfilter.resample_threshold_percentage }}</td>
      </tr>
    {% endfor %}
  </tbody>
</table>
</div>
{% endmacro %}


{% macro validation_results_table(proc_fxobs_list, before_resample) %}
<div class="report-table-wrapper">
<table class="table table-striped validation-table" style="width:100%;" id="data-validation-results-{{'before' if before_resample else 'after'}}-table">
  <caption style="caption-side:top; text-align: left">
    Table of data validation results {{'before' if before_resample else 'after'}} resampling
  </caption>
  <thead>
    <tr class="header">
      <th style="text-align: left;">Aligned Pair</th>
      {% for proc_fxobs in proc_fxobs_list %}
      <th style="text-align: center; vertical-align: middle">
        {{ proc_fxobs.name }}
      </th>
      {% endfor %}
    </tr>
    <tr class="header">
      <th style="text-align: left;">Observation</th>
      {% for proc_fxobs in proc_fxobs_list %}
      <th style="text-align: center; vertical-align: middle">
        {{ proc_fxobs.original.data_object.name }}
      </th>
      {% endfor %}
    </tr>
  </thead>
  <tbody>
    {% for flag in (proc_fxobs_list | unique_flags_filter(before_resample)) %}
      <tr>
        <td style="text-align: left">{{ flag }}</td>
        {% for proc_fxobs in proc_fxobs_list %}
          {% set ns = namespace(found=false) %}
            {% for res in proc_fxobs.validation_results %}
              {% if res.flag == flag %}
                {% set ns.found = true %}
        <td style="text-align: center">{{ res.count }}</td>
              {% endif %}
            {% endfor %}
          {% if not ns.found %}
        <td></td>
          {% endif %}
        {% endfor %}
      </tr>
    {% endfor %}
  </tbody>
</table>
</div>
{% endmacro %}


{% macro preprocessing_table(proc_fxobs_list) %}
{% set preproc_steps = [] %}
{% for proc_fxobs in proc_fxobs_list %}
  {% for res in proc_fxobs.preprocessing_results %}
    {% if res.name not in preproc_steps %}
      {% set preproc_steps = preproc_steps.append(res.name) %}
    {% endif %}
  {% endfor %}
{% endfor %}
<div class="report-table-wrapper">
<table class="table table-striped preprocessing-table" style="width:100%;" id="data-preprocessing-results-table">
  <caption style="caption-side:top; text-align: left">
    Table of data preprocessing results
  </caption>
  <thead>
    <tr class="header">
      <th style="text-align: left;">Preprocessing Description</th>
      {% for proc_fxobs in proc_fxobs_list %}
      <th style="text-align: center;">
        {{ proc_fxobs.name }} <br>Number of Points
      </th>
      {% endfor %}
    </tr>
  </thead>
  <tbody>
    {% for pstep in preproc_steps %}
      <tr>
      <td style="test-align: left">{{ pstep }}</td>
      {% for proc_fxobs in proc_fxobs_list %}
        {% set ns = namespace(found=false) %}
        {% for res in proc_fxobs.preprocessing_results %}
          {% if res.name == pstep %}
            {% set ns.found = true %}
            <td style="text-align: center">{{ res.count }}</td>
          {% endif %}
        {% endfor %}
        {% if not ns.found %}
          <td></td>
        {% endif %}
      {% endfor %}
      </tr>
    {% endfor %}
  </tbody>
</table>
</div>
{% endmacro %}


{% set getblob = "
        //addresses IE
        if (navigator.msSaveBlob) {
            navigator.msSaveBlob(blob, filename)
        } else {
            const link = document.createElement('a')
            link.href = URL.createObjectURL(blob)
            link.download = filename
            link.target = '_blank'
            link.style.visibility = 'hidden'
            link.dispatchEvent(new MouseEvent('click'))
        }
" %}

{% macro download_metrics_script() %}
<script>
    function json_to_csv(source) {
        const columns = Object.getOwnPropertyNames(source[0])
        const nrows = source.length
        const lines = [columns.join(',')]

        for (let i = 0; i < nrows; i++) {
            let row = [];
            for (let j = 0; j < columns.length; j++) {
                const column = columns[j]
                var val = source[i][column]
                if (column == 'index' && typeof val == 'number' && val > 100000000) {
                    val = new Date(val).toISOString().split('T')[0]
                } else {
                    if(val == null){
                        val = 'nan';
                    }else{
                        val = val.toString()
                    }
                }
                row.push(val)
            }
            lines.push(row.join(','))
        }
        return lines.join('\n').concat('\n')
    }

    function download_metrics_as_csv(report_name) {
        const filename = report_name.replace(/ /g, '_') + '_metrics.csv'
        const filetext = json_to_csv(metrics_json)
        const blob = new Blob([filetext], { type: 'text/csv;charset=utf-8;' })
        {{ getblob }}
    }

    function download_metrics_as_json(report_name) {
        const filename = report_name.replace(/ /g, '_') + '_metrics.json'
        const blob = new Blob([JSON.stringify(metrics_json)], { type: 'application/json;charset=utf-8;' })
        {{ getblob }}
    }

    function download_stats_as_csv(report_name) {
        const filename = report_name.replace(/ /g, '_') + '_summary_stats.csv'
        const filetext = json_to_csv(summary_stats)
        const blob = new Blob([filetext], { type: 'text/csv;charset=utf-8;' })
        {{ getblob }}
    }

    function download_stats_as_json(report_name) {
        const filename = report_name.replace(/ /g, '_') + '_summary_stats.json'
        const blob = new Blob([JSON.stringify(summary_stats)], { type: 'application/json;charset=utf-8;' })
        {{ getblob }}
    }
</script>
{% endmacro %}


{% macro download_metadata_script() %}
<script>
    function download_metadata_as_json(report_name) {
        const filename = report_name.replace(/ /g, '_') + '_metadata.json'
        const blob = new Blob([JSON.stringify(metadata_json)], { type: 'application/json;charset=utf-8;' })
        {{ getblob }}
    }
</script>
{% endmacro %}


{% macro download_timeseries_script() %}
<script>
    function extract_plotly_data(plot) {
      if (typeof plot === 'undefined') { return ''}
      const data = plot.data;
      const ncolumns = data.length;
      const nrows = data[0].x.length;
      const colnames = [''];
      const lines = [];

      for (let j = 0; j < ncolumns; j++) {
        colnames.push(data[j].legendgroup)
      }
      lines.push(colnames.join(','))

      for (let i = 0; i < nrows; i++) {
        let row = [];
        row.push(data[0].x[i])
        for (let j = 0; j < ncolumns; j++) {
          let val = data[j].y[i]
          if(val == null){
            val = 'nan';
          }else{
            val = val.toString()
          }
          row.push(val)
        }
        lines.push(row.join(','))
      }
      return lines.join('\n').concat('\n')
    }

    function download_timeseries_data_as_csv(report_name) {
        const filename = report_name.replace(/ /g, '_') + '_timeseries.csv'
        const csvdata = extract_plotly_data(ts_plot)
        const blob = new Blob([csvdata], { type: 'text/csv;charset=utf-8;' })
        {{ getblob }}
    }
</script>
{% endmacro %}

{% macro start_end_query(report_parameters) %}
{% if report_parameters is defined %}
?start={{ report_parameters.start }}&end={{ report_parameters.end }}
{% endif %}
{% endmacro %}
